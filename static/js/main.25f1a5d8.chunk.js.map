{"version":3,"sources":["utils/shortestPath.js","Component/Home.js","App.js","reportWebVitals.js","index.js"],"names":["shortestDistanceNode","distances","visited","shortest","node","includes","findShortestPath","graph","startNode","endNode","Object","assign","parents","child","distance","children","String","newdistance","push","shortestPath","parent","reverse","path","Home","restaurants","houses","useState","name","startPosition","deliveryExecutives","updateDeliveryExecutives","dataList","node1","node2","orderGraphData","setOrderGraphData","showGraph","toggleGraph","graphConfig","freezeAllDragEvents","nodeHighlightBehavior","color","highlightStrokeColor","fontSize","link","highlightColor","renderLabel","labelProperty","directed","height","width","orderData","setOrderData","updatePickupLocationOfDeliveryLocation","event","pickupLocation","target","value","updateDropLocationOfDeliveryLocation","dropLocation","submitOrders","item","keys","generateGraphData","distanceToReachForEachExecutive","i","length","selectedIndex","indexOf","Math","min","selectedDeliveryExecutive","pickupShortestPath","deliveryShortestPath","deliveryExecutive","deliveryExecutiveStartingLocation","pickup","links","getLinks","nodes","generateNodes","drop","executives","source","map","id","Grid","container","xs","md","className","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","index","key","scope","deliveryPerson","style","textAlign","InputLabel","Select","onChange","MenuItem","marginTop","Button","variant","onClick","data","config","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25f1a5d8.chunk.js","sourcesContent":["const shortestDistanceNode = (distances, visited) => {\n  // create a default value for shortest\n  let shortest = null;\n\n  // for each node in the distances object\n  for (let node in distances) {\n    // if no node has been assigned to shortest yet\n    // or if the current node's distance is smaller than the current shortest\n    let currentIsShortest =\n      shortest === null || distances[node] < distances[shortest];\n\n    // and if the current node is in the unvisited set\n    if (currentIsShortest && !visited.includes(node)) {\n      // update shortest to be the current node\n      shortest = node;\n    }\n  }\n  return shortest;\n};\n\nconst findShortestPath = (graph, startNode, endNode) => {\n\n  // track distances from the start node using a hash object\n  let distances = {};\n  distances[endNode] = \"Infinity\";\n  distances = Object.assign(distances, graph[startNode]);\n\n  // track paths using a hash object\n  let parents = { endNode: null };\n  for (let child in graph[startNode]) {\n    parents[child] = startNode;\n  }\n\n  // collect visited nodes\n  let visited = [];\n  // find the nearest node\n  let node = shortestDistanceNode(distances, visited);\n\n  // for that node:\n  while (node) {\n    // find its distance from the start node & its child nodes\n    let distance = distances[node];\n    let children = graph[node];\n\n    // for each of those child nodes:\n    for (let child in children) {\n\n      // make sure each child node is not the start node\n      if (String(child) === String(startNode)) {\n        continue;\n      } else {\n        // save the distance from the start node to the child node\n        let newdistance = distance + children[child];\n        // if there's no recorded distance from the start node to the child node in the distances object\n        // or if the recorded distance is shorter than the previously stored distance from the start node to the child node\n        if (!distances[child] || distances[child] > newdistance) {\n          // save the distance to the object\n          distances[child] = newdistance;\n          // record the path\n          parents[child] = node;\n        }\n      }\n    }\n    // move the current node to the visited set\n    visited.push(node);\n    // move to the nearest neighbor node\n    node = shortestDistanceNode(distances, visited);\n  }\n\n  // using the stored paths from start node to end node\n  // record the shortest path\n  let shortestPath = [endNode];\n  let parent = parents[endNode];\n  while (parent) {\n    shortestPath.push(parent);\n    parent = parents[parent];\n  }\n  shortestPath.reverse();\n\n  //this is the shortest path\n  let results = {\n    distance: distances[endNode],\n    path: shortestPath,\n  };\n  // return the shortest path & the end node's distance from the start node\n  return results;\n};\n\nexport default findShortestPath;","import React, { useState, } from 'react'\nimport {\n  Button,\n  InputLabel,\n  Select,\n  MenuItem,\n  TableCell,\n  TableContainer,\n  Paper,\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n  Grid,\n} from '@material-ui/core'\nimport { Graph } from 'react-d3-graph'\nimport findShortestPath from '../utils/shortestPath'\n\nconst Home = () => {\n  const restaurants = [\"R1\", \"R2\", \"R3\"]\n  const houses = [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\"]\n  const [deliveryExecutives, updateDeliveryExecutives] = useState([\n    {\n      name: \"D1\",\n      startPosition: \"H1\",\n    },\n    {\n      name: \"D2\",\n      startPosition: \"H3\",\n    }\n  ])\n\n  const dataList = [\n    {\n      node1: \"R1\",\n      node2: \"H3\",\n      distance: 3,\n    },\n    {\n      node1: \"R1\",\n      node2: \"H5\",\n      distance: 7,\n    },\n    {\n      node1: \"R2\",\n      node2: \"H1\",\n      distance: 5,\n    },\n    {\n      node1: \"R2\",\n      node2: \"H3\",\n      distance: 6,\n    },\n    {\n      node1: \"R2\",\n      node2: \"H4\",\n      distance: 10,\n    },\n    {\n      node1: \"R3\",\n      node2: \"H2\",\n      distance: 8,\n    },\n    {\n      node1: \"R3\",\n      node2: \"H3\",\n      distance: 6,\n    },\n  ]\n\n  const [orderGraphData, setOrderGraphData] = useState({})\n  const [showGraph, toggleGraph] = useState(false)\n  const graphConfig = {\n    freezeAllDragEvents: true,\n    nodeHighlightBehavior: true,\n    node: {\n      color: \"lightgreen\",\n      highlightStrokeColor: \"blue\",\n      fontSize: 16,\n    },\n    link: {\n      highlightColor: \"lightblue\",\n      renderLabel: true,\n      labelProperty: \"distance\",\n      fontSize: 12,\n    },\n    directed: true,\n    height: 300,\n    width: 300,\n  };\n\n  const generateGraphData = () => {\n    let graph = {};\n\n    for (let item of dataList) {\n      graph[item.node1] = Object.keys(graph).includes(item.node1)\n        ? { ...graph[item.node1], [item.node2]: item.distance }\n        : { [item.node2]: item.distance }\n      graph[item.node2] = Object.keys(graph).includes(item.node2)\n        ? { ...graph[item.node2], [item.node1]: item.distance }\n        : { [item.node1]: item.distance }\n    }\n    return graph;\n  }\n\n  const [orderData, setOrderData] = useState({})\n\n  const updatePickupLocationOfDeliveryLocation = event => {\n    setOrderData({ ...orderData, pickupLocation: event.target.value })\n  }\n\n  const updateDropLocationOfDeliveryLocation = event => {\n    setOrderData({ ...orderData, dropLocation: event.target.value })\n  }\n\n  const finalForm = () => {\n    return (\n      <div>\n        <div>\n          <div>\n            <h4>Orders</h4>\n            <h5>Live Location</h5>\n            <div>\n              {deliveryExecutives.map(deliveryPerson => (\n                <div key={deliveryPerson.name}>\n                  Delivery Executive {deliveryPerson.name} is at Location {deliveryPerson.startPosition}\n                </div>\n              ))}\n            </div>\n            <div style={{ textAlign: \"left\" }}>\n              <p>Steps to proceed :-</p>\n              <ol>\n                <li>Select the Pickup Location</li>\n                <li>Select the Drop Location</li>\n              </ol>\n            </div>\n          </div>\n        </div>\n        <TableContainer component={Paper} className=\"table\">\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  <InputLabel>Select Pickup location</InputLabel>\n                  <Select onChange={updatePickupLocationOfDeliveryLocation}>\n                    {restaurants.map(item => <MenuItem key={item} value={item}>{item}</MenuItem>)}\n                  </Select>\n                </TableCell>\n                <TableCell>\n                  <InputLabel>Select Delivery Location</InputLabel>\n                  <Select onChange={updateDropLocationOfDeliveryLocation}>\n                    {houses.map(item => <MenuItem key={item} value={item}>{item}</MenuItem>)}\n                  </Select>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n          </Table>\n        </TableContainer>\n\n        <Grid container style={{ marginTop: \"40px\" }}>\n          <Grid xs={12}>\n            <Button variant=\"contained\" color=\"primary\" onClick={submitOrders}>Submit</Button>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n\n  const submitOrders = () => {\n    toggleGraph(false)\n    const graph = generateGraphData();\n    const distanceToReachForEachExecutive = []\n    for (let i = 0; i < deliveryExecutives.length; i++) {\n      const shortestPath = findShortestPath(graph, deliveryExecutives[i].startPosition, orderData.pickupLocation)\n      distanceToReachForEachExecutive.push(shortestPath.distance);\n    }\n\n    const selectedIndex = distanceToReachForEachExecutive.indexOf(Math.min(...distanceToReachForEachExecutive));\n    const selectedDeliveryExecutive = deliveryExecutives[selectedIndex];\n\n    const pickupShortestPath = findShortestPath(graph, selectedDeliveryExecutive.startPosition, orderData.pickupLocation)\n    const deliveryShortestPath = findShortestPath(graph, orderData.pickupLocation, orderData.dropLocation)\n\n    setOrderGraphData({\n      deliveryExecutive: selectedDeliveryExecutive.name,\n      deliveryExecutiveStartingLocation: selectedDeliveryExecutive.startPosition,\n      pickup: {\n        links: getLinks(graph, pickupShortestPath.path),\n        nodes: generateNodes(pickupShortestPath.path),\n      },\n      drop: {\n        links: getLinks(graph, deliveryShortestPath.path),\n        nodes: generateNodes(deliveryShortestPath.path)\n      },\n    })\n    toggleGraph(true)\n\n    const executives = [...deliveryExecutives]\n    executives[selectedIndex].startPosition = orderData.dropLocation\n    updateDeliveryExecutives(executives)\n  }\n\n  const getLinks = (graph, path) => {\n    const links = []\n    for (let i = 1; i < path.length; i++) {\n      let graphNode = graph[path[i - 1]];\n      let distance = graphNode[path[i]]\n      links.push({ source: path[i - 1], target: path[i], distance })\n    }\n    return links;\n  }\n\n  const generateNodes = (path) => path.map(item => ({ id: item }))\n\n\n  const getDataTable = () => {\n    return (\n      <TableContainer component={Paper} className=\"table\">\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Restaurants</TableCell>\n              <TableCell align=\"center\">Houses</TableCell>\n              <TableCell align=\"center\">Distance</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n\n            {dataList.map((item, index) => (\n              <TableRow key={index}>\n                <TableCell component=\"th\" align=\"center\" scope=\"row\">\n                  {item.node1}\n                </TableCell>\n                <TableCell align=\"center\">{item.node2}</TableCell>\n                <TableCell align=\"center\">{item.distance}</TableCell>\n              </TableRow>\n            ))}\n\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n  }\n\n  return (\n    <div>\n      <>\n        <Grid container>\n          <Grid xs={12}>\n            <h3>Live Ordering System</h3>\n          </Grid>\n        </Grid>\n        <Grid container>\n          <Grid item xs={12} md={6}>\n\n            <div className=\"form\">\n              {getDataTable()}\n            </div>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            {finalForm()}\n          </Grid>\n\n          {showGraph ? (\n            <Grid item xs={12}>\n              <Grid container>\n                <Grid item xs={6} md={6}>\n                  <div>\n                    <div>\n                      {orderGraphData.deliveryExecutive} will go from {orderGraphData.deliveryExecutiveStartingLocation} to {orderData.pickupLocation} for Pickup\n                    </div>\n                    <Graph\n                      id=\"graph-id-pickup\" // id is mandatory\n                      data={orderGraphData.pickup}\n                      config={graphConfig}\n                    />\n                  </div>\n                </Grid>\n                <Grid item xs={6} md={6}>\n                  <div>\n                    <div>\n                      {orderGraphData.deliveryExecutive} will go from {orderData.pickupLocation} to {orderData.dropLocation} for Delivery\n                    </div>\n                    <Graph\n                      id=\"graph-id-drop\" // id is mandatory\n                      data={orderGraphData.drop}\n                      config={graphConfig}\n                    />\n                  </div>\n                </Grid>\n              </Grid>\n            </Grid>\n          ) : null}\n        </Grid>\n      </>\n\n    </div >\n  )\n}\n\nexport default Home","import React from 'react'\nimport './App.css';\nimport Home from './Component/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n      {/* <Demo /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}